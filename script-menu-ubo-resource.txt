# name:  Script menu for firefox mobile 79+(fenix) using ublock origin
# author: yobukodori 
# description: Run arbitrary scripts such as bookmarklets in firefox mobile 79+(fenix).
# homepage: https://github.com/yobukodori/firefox-mobile-script-menu

script-menu.js application/javascript
(function() {
	let appName = "fmsm", appVer = "v.0.9.b";
	if (! window["fmsm-data"]){
		window["fmsm-data"] = { nInstance:0, pw:[] };
	}
	let appId = window["fmsm-data"].nInstance++, appLogPrefix = "["+appName+":"+appId+"]";
	function log(){
		console.log.apply(console,[appLogPrefix].concat(Array.from(arguments)));
	}
	log(appName,appVer);
	log("running on", location.href);
	let pw = '{{1}}', name = '{{2}}', src = '{{3}}', options = '{{4}}';
	try { options = JSON.parse(options) } catch (e){ options = {}; }
	let args = {pw: pw, name: name, src: src, options: options};
	log("args:", args, "\noptions:",options);
	if (! /^(https?|javascript|fmsm|password):/.test(src)){
		log("unknown script type:", src.substring(0,80));
		return;
	}
	let scheme = src.substring(0, src.indexOf(":"));
	if (scheme === "password"){
		window["fmsm-data"].pw.push(src.substring(scheme.length+1).trim());
		return;
	}
	let languageResource = {
		"ja": {
			"Error": "エラー",
			"Password does not match": "パスワードが一致しません",
			"fmsm password is defined more than once": "パスワードが２回以上設定されています",
			"fmsm password is not defined": "パスワードが設定されていません",
			"Got HTML! Tap here to view source": "HTMLを取得しました。ここをタップして表示します",
			"Close": "閉じる",
			"Exit": "終了",
		}
	};
	function t(msg){
		let res = languageResource[navigator.language.split('-')[0]];
		return (res &&  res[msg]) ?  res[msg] : msg;
	}
	function aesDecrypt(ciphertext, password, iv, callback){
		let te = new TextEncoder(),
			crypted = Uint8Array.from(Array.prototype.map.call(atob(ciphertext), c=>{return c.charCodeAt(0);}));
		crypto.subtle.importKey('raw', te.encode(password), {name:'AES-CBC'}, false, ['decrypt'])
		.then(cryptoKey=>{
			return crypto.subtle.decrypt({name: 'AES-CBC', iv: te.encode(iv)},cryptoKey,crypted);
		})
		.then(decrypted=>{
			let plaintext = new TextDecoder().decode(decrypted);
			callback(plaintext);
		})
	}
	function truncate(str, maxLength){
		return str.length > maxLength ? str.substring(0, maxLength) + " ..." : str;
	}
	function isString(v){
		return typeof v === 'string' || (typeof v !== "undefined" && v instanceof String);
	}
	function inject(src, charset, inline){
		let e = document.createElement("script");
		if (charset){ e.charset = charset };
		inline ?  (e.textContent = src) : (e.src = src);
		document.body.appendChild(e);
		e.remove();
	}
	let fmsm = {
		pageSource: "",
		"scroll-to-top": function(){
			scrollTo(0, 0);
		},
		"scroll-to-bottom": function(){
			scrollTo(0, document.body.scrollHeight)
		},
		"view-source": function(){
			function convertSourceToURL(src){
				return URL.createObjectURL(new Blob([src],{type:'text/plain; charset="utf-8"'}));
			}
			if (fmsm.pageSource){
				let a = document.createElement("a");
				a.href = convertSourceToURL(fmsm.pageSource);
				a.target = "_blank";
				a.click()
				return;
			}
			const className = "fmsm-view-source-dialog";
			if (document.querySelector("."+className)){
				console.log("source-view already running");
				return;
			}
			let a = document.createElement("a");
			a.className = className;
			a.addEventListener("click",ev=>{
				a.remove();
			});
			a.addEventListener("mousedown",ev=>{
				if (ev.button === 1){
					setTimeout(function(){a.remove();}, 500);
				}
			});
			a.href = "javascript:void(0)";
			a.textContent = "Requesting html";
			document.body.appendChild(a);
			fetch(location.href)
			.then(res=>{
				return res.arrayBuffer();
			})
			.then(buf=>{
				fmsm.pageSource = new TextDecoder(document.characterSet).decode(buf);
				a.target = "_blank";
				a.href = convertSourceToURL(fmsm.pageSource);
				a.textContent = t("Got HTML! Tap here to view source");
			})
			.catch(e=>{
				a.textContent = e.message+"\nTap this message to close";
			});
		},
		"view-outerhtml": function(){
			let html, selection = window.getSelection(), range;
			if (selection.rangeCount > 0 && ! (range = selection.getRangeAt(0)).collapsed){
				const ELEMENT_NODE = 1, TEXT_NODE = 3;
				let container = range.commonAncestorContainer;
				if (container.nodeType === TEXT_NODE){
					container = container.parentNode;
				}
				html = container.outerHTML;
			}
			else {
				html = document.documentElement.outerHTML;
			}
			let a = document.createElement("a");
			a.href = URL.createObjectURL(new Blob([html],{type:'text/plain; charset="utf-8"'}));
			a.target = "_blank";
			a.click()
		}
	};
	function runScript(args){
		let src = args.src, charset = args.options.charset, aes = args.options.aes,
			scheme = src.substring(0, src.indexOf(":"));
		log("run",src);
		if (scheme === "fmsm"){
			src = src.substring(scheme.length+1).trim();
			if (typeof fmsm[src] === "function"){
				setTimeout(fmsm[src], 0);
			}
			else {
				log("No such a built-in script:", src);
			}
		}
		else {
			if (scheme === "javascript"){
				inject(src.substring(scheme.length+1), "utf-8", true);
			}
			else {
				if (aes){
					if (isString(aes.pass) && isString(aes.iv)){
						log("processing AES");
						fetch(src)
						.then(res=>{
							if (! res.ok){
								throw Error("Response type:"+res.type+" status:"+res.status+" statusText:"+res.statusText);
							}
							return res.text();
						})
						.then(text=>{
							aesDecrypt(text, aes.pass, aes.iv, plaintext=>{
								log("decrypted:",plaintext.substring(0,80));
								inject(plaintext, charset, true);
							});
						})
						.catch(e=>{
							log(e);
						});
					}
					else {
						log("wrong aes.pass and/or aes.iv. both must be string");
					}
				}
				else {
					inject(src, charset, false);
				}
			}
		}
	}
	function appendStylesheet(rules, id)	{
		let e = document.createElement("style");
		if (id){
			e.id = id;
		}
		e.type = "text/css";
		e.innerHTML = rules;
		document.getElementsByTagName("head")[0].appendChild(e);
	}
	function createMenu(){
		appendStylesheet("#fmsm-menu-button{border:thin solid;width:30px;height:30px;background-color:gold; color:black;font-size:24px;font-family:serif;font-weight:bold;text-align:center;padding:initial; position:fixed;top:100px;right:0px;z-index:2147483647;} #fmsm-menu{display:inline-flex;flex-direction:column;background-color:gainsboro;position:absolute;right:0;z-index:2147483647;} #fmsm-menu > button {font-family:sans-serif;font-size:18px !important;border:thin solid !important;padding:0.3em 0.2em !important;text-align:center !important;} .fmsm-error {color:red;background-color:yellow} .fmsm-warning {background-color:yellow} .fmsm-menu-item-has-summary {line-height:1em;} .fmsm-menu-item-name{font-family:sans-serif;font-size:18px !important;} .fmsm-menu-item-summary{font-family:sans-serif;font-size:16px !important;color:blue !important;} #fmsm-about{font-size:15px !important} .fmsm-hide{display:none !important;} .fmsm-view-source-dialog {position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 0.5em 1em; background-color: lightgray; border: solid; font-size:24px;font-family:serif;}");
		function createMenuButton(){
			let btnId = "fmsm-menu-button";
			if (document.getElementById(btnId)){ return; }
			log("creating menu button");
			let btn = document.createElement("button");
			btn.id = btnId;
			btn.textContent = "S";
			document.body.appendChild(btn);
			btn.addEventListener("click",ev=>{
				log("menu button clicked");
				ev.stopPropagation();
				log("removing menu button");
				btn.remove();
				log("creating menu");
				const summary_max = 60;
				let html = "";
				if (window["fmsm-data"].pw.length === 1){
					if (! document["fmsm-data"].sorted){
						document["fmsm-data"].sorted = true;
						log("sorting menu items");
						document["fmsm-data"].menuItem.sort((a,b)=>{
							let a_idx =a.options.index * 1, b_idx = b.options.index * 1;
							if (! isNaN(a_idx)){
								return isNaN(b_idx) ? -1 : a_idx - b_idx;
							}
							else { // a is not numeric.
								return ! isNaN(b_idx) ? 1 : (a.name < b.name ?  -1 : (a.name > b.name ? 1 : 0));
							}
						});
					}
					document["fmsm-data"].menuItem.forEach((item,idx)=>{
						let name = item.name, src = item.src, options = item.options,
							summary = "", scheme = src.substring(0, src.indexOf(":")),
							fError, fWarning;
						if (item.pw === window["fmsm-data"].pw[0]){
							if (scheme === "fmsm"){
								if (! name){
									summary = src;
								}
							}
							else {
								if (scheme === "javascript"){
									summary = truncate(src.substring(scheme.length+1).replace(/\s+/g,' ').trim(), summary_max);
								}
								else if (scheme === "https" || scheme === "http"){
									// convert the url to fully qualified url.
									let a = document.createElement("a");
									a.href = src;
									summary = a.href.substring(scheme.length+3);
								}
								else {
									summary = truncate(src.replace(/\s+/g,' ').trim(), summary_max);
								}
								if (options.summary === "no"){
									fWarning = true;
									if (name){
										summary = "";
									}
								}
							}
						}
						else {
							fError = true;
							summary = summary = truncate(src.replace(/\s+/g,' ').trim(), summary_max)
										+ '<br/>' + t("Error") + ": " + t("Password does not match");
						}
						let itemClass = 'fmsm-menu-item' 
											+ (fError ? ' fmsm-error' : '')
											+ (fWarning ? ' fmsm-warning' : '')
											+ (summary ? ' fmsm-menu-item-has-summary' : '');
						if (summary){
							summary = '<div class="fmsm-menu-item-summary">' + summary + '</div>';
						}
						html += '<button data-index="' + idx + '" class="' + itemClass + '"'
									+ (fError ? ' disabled' : '') + '>'
									+ '<span class="fmsm-menu-item-name">' + name + ' </span>'
									+ summary
									+ '</button>';
					});
				}
				else {
					let msg;
					if (window["fmsm-data"].pw.length === 0){
						msg = t("fmsm password is not defined");
					}
					else {
						msg = t("fmsm password is defined more than once")
								+ '<br />' + window["fmsm-data"].pw.join('<br />');
					}
					html = '<button class="fmsm-error">' + t('Error') + ': ' + msg + '</button>';
				}
				html += '<button id="fmsm-menu-close">' + t('Close') + '</button>'
							+ '<button id="fmsm-menu-exit">' + t('Exit') + '</button>'
							+ '<div id="fmsm-about">'+appName+' '+appVer+'</div>'
							;
				let menu = document.createElement("div");
				menu.id = "fmsm-menu";
				menu.innerHTML = html;
				menu.style.top = (window.pageYOffset + 100) + "px";
				document.body.appendChild(menu);
				Array.from(menu.getElementsByClassName("fmsm-menu-item")).forEach(e=>{
					let index = e.getAttribute("data-index");
					e.addEventListener("click", ev=>{
						log("menu-item clicked and removing menu");
						menu.remove();
						let args = document["fmsm-data"].menuItem[index];
						log("index:",index,"args:",args);
						runScript(args);
						if (args.options.once){
							log("removing",document["fmsm-data"].menuItem[index]);
							document["fmsm-data"].menuItem.splice(index,1);
						}
						createMenuButton();
					});
				});
				document.getElementById("fmsm-menu-close").addEventListener("click", ev=>{
					log("menu-close clicked");
				});
				document.getElementById("fmsm-menu-exit").addEventListener("click", ev=>{
					log("menu-exit clicked and removing menu");
					menu.remove();
				});
				document.addEventListener("click",ev=>{
					if (menu.parentElement){
						log("document clicked and removing menu");
						menu.remove();
						createMenuButton();
					}
				});
			});
		}
		createMenuButton();
	}
	function onDomReady(ev){
		log("onRomReady");
		if (! document["fmsm-data"]){
			log('initializing document["fmsm-data"]');
			document["fmsm-data"] = { menuItem: [] };
		}
		if (document["fmsm-data"].menuItem.push(args) === 1){
			createMenu();
		}
	}
	log("readystate",document.readyState);
	if (document.readyState === "loading"){
		document.addEventListener("DOMContentLoaded", onDomReady);
		log("added event listener: DOMContentLoaded");
	} else {
		onDomReady();
	}
})();

